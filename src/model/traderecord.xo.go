package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// TradeRecord represents a row from 'bitgin.trade_record'.
type TradeRecord struct {
	ID        int            `json:"id"`         // id
	UserID    int            `json:"user_id"`    // user_id
	Cost      float64        `json:"cost"`       // cost
	CutFlag   bool           `json:"cut_flag"`   // cut_flag
	Comment   sql.NullString `json:"comment"`    // comment
	CreatedAt time.Time      `json:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the TradeRecord exists in the database.
func (tr *TradeRecord) Exists() bool {
	return tr._exists
}

// Deleted returns true when the TradeRecord has been marked for deletion from
// the database.
func (tr *TradeRecord) Deleted() bool {
	return tr._deleted
}

// Insert inserts the TradeRecord to the database.
func (tr *TradeRecord) Insert(ctx context.Context, db DB) error {
	switch {
	case tr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case tr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO bitgin.trade_record (` +
		`user_id, cost, cut_flag, comment, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, tr.UserID, tr.Cost, tr.CutFlag, tr.Comment, tr.CreatedAt)
	res, err := db.ExecContext(ctx, sqlstr, tr.UserID, tr.Cost, tr.CutFlag, tr.Comment, tr.CreatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	tr.ID = int(id)
	// set exists
	tr._exists = true
	return nil
}

// Update updates a TradeRecord in the database.
func (tr *TradeRecord) Update(ctx context.Context, db DB) error {
	switch {
	case !tr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case tr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE bitgin.trade_record SET ` +
		`user_id = ?, cost = ?, cut_flag = ?, comment = ?, created_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, tr.UserID, tr.Cost, tr.CutFlag, tr.Comment, tr.CreatedAt, tr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tr.UserID, tr.Cost, tr.CutFlag, tr.Comment, tr.CreatedAt, tr.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the TradeRecord to the database.
func (tr *TradeRecord) Save(ctx context.Context, db DB) error {
	if tr.Exists() {
		return tr.Update(ctx, db)
	}
	return tr.Insert(ctx, db)
}

// Upsert performs an upsert for TradeRecord.
func (tr *TradeRecord) Upsert(ctx context.Context, db DB) error {
	switch {
	case tr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO bitgin.trade_record (` +
		`id, user_id, cost, cut_flag, comment, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`user_id = VALUES(user_id), cost = VALUES(cost), cut_flag = VALUES(cut_flag), comment = VALUES(comment), created_at = VALUES(created_at)`
	// run
	logf(sqlstr, tr.ID, tr.UserID, tr.Cost, tr.CutFlag, tr.Comment, tr.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, tr.ID, tr.UserID, tr.Cost, tr.CutFlag, tr.Comment, tr.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	tr._exists = true
	return nil
}

// Delete deletes the TradeRecord from the database.
func (tr *TradeRecord) Delete(ctx context.Context, db DB) error {
	switch {
	case !tr._exists: // doesn't exist
		return nil
	case tr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM bitgin.trade_record ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, tr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tr.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	tr._deleted = true
	return nil
}

// TradeRecordByID retrieves a row from 'bitgin.trade_record' as a TradeRecord.
//
// Generated from index 'trade_record_id_pkey'.
func TradeRecordByID(ctx context.Context, db DB, id int) (*TradeRecord, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, cost, cut_flag, comment, created_at ` +
		`FROM bitgin.trade_record ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	tr := TradeRecord{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&tr.ID, &tr.UserID, &tr.Cost, &tr.CutFlag, &tr.Comment, &tr.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &tr, nil
}

// TradeRecordByUserID retrieves a row from 'bitgin.trade_record' as a TradeRecord.
//
// Generated from index 'user_id'.
func TradeRecordByUserID(ctx context.Context, db DB, userID int) (*TradeRecord, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, cost, cut_flag, comment, created_at ` +
		`FROM bitgin.trade_record ` +
		`WHERE user_id = ?`
	// run
	logf(sqlstr, userID)
	tr := TradeRecord{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&tr.ID, &tr.UserID, &tr.Cost, &tr.CutFlag, &tr.Comment, &tr.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &tr, nil
}
