package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// UserBalance represents a row from 'bitgin.user_balance'.
type UserBalance struct {
	ID        int       `json:"id"`         // id
	UserID    int       `json:"user_id"`    // user_id
	Balance   float64   `json:"balance"`    // balance
	Point     int       `json:"point"`      // point
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the UserBalance exists in the database.
func (ub *UserBalance) Exists() bool {
	return ub._exists
}

// Deleted returns true when the UserBalance has been marked for deletion from
// the database.
func (ub *UserBalance) Deleted() bool {
	return ub._deleted
}

// Insert inserts the UserBalance to the database.
func (ub *UserBalance) Insert(ctx context.Context, db DB) error {
	switch {
	case ub._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ub._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO bitgin.user_balance (` +
		`user_id, balance, point, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	ub.UpdatedAt = time.Now()
	logf(sqlstr, ub.UserID, ub.Balance, ub.Point, ub.UpdatedAt)
	res, err := db.ExecContext(ctx, sqlstr, ub.UserID, ub.Balance, ub.Point, ub.UpdatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	ub.ID = int(id)
	// set exists
	ub._exists = true
	return nil
}

// Update updates a UserBalance in the database.
func (ub *UserBalance) Update(ctx context.Context, db DB) error {
	switch {
	case !ub._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ub._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE bitgin.user_balance SET ` +
		`user_id = ?, balance = ?, point = ?, updated_at = ? ` +
		`WHERE id = ?`
	// run
	ub.UpdatedAt = time.Now()
	logf(sqlstr, ub.UserID, ub.Balance, ub.Point, ub.UpdatedAt, ub.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ub.UserID, ub.Balance, ub.Point, ub.UpdatedAt, ub.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the UserBalance to the database.
func (ub *UserBalance) Save(ctx context.Context, db DB) error {
	if ub.Exists() {
		return ub.Update(ctx, db)
	}
	return ub.Insert(ctx, db)
}

// Upsert performs an upsert for UserBalance.
func (ub *UserBalance) Upsert(ctx context.Context, db DB) error {
	switch {
	case ub._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO bitgin.user_balance (` +
		`id, user_id, balance, point, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`user_id = VALUES(user_id), balance = VALUES(balance), point = VALUES(point), updated_at = VALUES(updated_at)`
	// run
	ub.UpdatedAt = time.Now()
	logf(sqlstr, ub.ID, ub.UserID, ub.Balance, ub.Point, ub.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ub.ID, ub.UserID, ub.Balance, ub.Point, ub.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ub._exists = true
	return nil
}

// Delete deletes the UserBalance from the database.
func (ub *UserBalance) Delete(ctx context.Context, db DB) error {
	switch {
	case !ub._exists: // doesn't exist
		return nil
	case ub._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM bitgin.user_balance ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ub.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ub.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ub._deleted = true
	return nil
}

// UserBalanceByID retrieves a row from 'bitgin.user_balance' as a UserBalance.
//
// Generated from index 'user_balance_id_pkey'.
func UserBalanceByID(ctx context.Context, db DB, id int) (*UserBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, balance, point, updated_at ` +
		`FROM bitgin.user_balance ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	ub := UserBalance{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ub.ID, &ub.UserID, &ub.Balance, &ub.Point, &ub.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ub, nil
}

// UserBalanceByUserID retrieves a row from 'bitgin.user_balance' as a UserBalance.
//
// Generated from index 'user_id'.
func UserBalanceByUserID(ctx context.Context, db DB, userID int) (*UserBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, balance, point, updated_at ` +
		`FROM bitgin.user_balance ` +
		`WHERE user_id = ?`
	// run
	logf(sqlstr, userID)
	ub := UserBalance{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&ub.ID, &ub.UserID, &ub.Balance, &ub.Point, &ub.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ub, nil
}
